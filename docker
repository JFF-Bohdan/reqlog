ARG DOCKER_BASE
FROM $DOCKER_BASE

ARG build=1

ARG application
ENV application=${application}

ARG app_socket_name=/tmp/${application}_socket.socket
ENV app_socket_name=${app_socket_name}

ARG web_app_name="Req Log (in Docker), own instance"
ENV web_app_name=${web_app_name}

ARG static_files_path=/var/data/${application}/static
ENV static_files_path=${static_files_path}

ARG app_templates_path=/opt/${application}/templates
ENV app_templates_path=${app_templates_path}

ARG server_secret=123
ENV server_secret=${server_secret}

ARG cookie_sign_secret=456
ENV cookie_sign_secret=${cookie_sign_secret}

ARG token_ttl_secs=1600
ENV token_ttl_secs=${token_ttl_secs}

ARG token_recreate_before_secs=100
ENV token_recreate_before_secs=${token_recreate_before_secs}

ARG solution_name=ReqLog
ENV solution_name=${solution_name}

ARG instance_owner_name="ACME corp"
ENV instance_owner_name=${instance_owner_name}

ARG webappname="ReqLog (own instance)"
ENV webappname=${webappname}

ARG app_host=0.0.0.0
ENV app_host=${app_host}

ENV dbmgt_script=${application}.dbmgt

ARG sqlite_db_path=/var/data/${application}/db
ARG database_connection_string="sqlite:////var/data/${application}/db/db.sqlite"
ENV app_database_connection_string=${database_connection_string}

ARG app_produce_sql_echo=false
ENV app_produce_sql_echo=${app_produce_sql_echo}
################
#    sqlite    #
################

RUN apt-get -yqq install sqlite

##################
#      dirs      #
##################

# adding directory for log files
RUN mkdir -p /var/log/${application}

# adding directory for app
RUN mkdir -p /opt/${application}

# adding directory for uwsgi configuration
RUN mkdir -p /etc/${application}

#################
#     nginx     #
#################

# Make NGINX run on the foreground
RUN echo "daemon off;" >> /etc/nginx/nginx.conf

# removing nginx default configuration
RUN rm /etc/nginx/sites-available/default

# adding new configuration for nginx
COPY ./infrastructure/config/nginx/nginx.conf /etc/nginx/conf.d/

# converting file to unix end line format
RUN dos2unix /etc/nginx/conf.d/nginx.conf

# configuring nginx
RUN sed -i -e 's|SOCKET_NAME|unix://'"$app_socket_name"'|g' /etc/nginx/conf.d/nginx.conf
RUN sed -i -e 's/APP_NAME/'"$application"'/g' /etc/nginx/conf.d/nginx.conf
RUN sed -i -e 's|APP_STATIC_FILES_DIR|'"$static_files_path"'|g' /etc/nginx/conf.d/nginx.conf

#################
#     uwsgi     #
#################

# adding uwsgi configuration to image
ADD ./infrastructure/config/uwsgi/uwsgi_app.ini /etc/${application}

# converting file to unix end line format
RUN dos2unix /etc/${application}/uwsgi_app.ini

# configuring uwsgi (can be done better)
RUN sed -i -e 's|SOCKET_NAME|'"$app_socket_name"'|g' /etc/${application}/uwsgi_app.ini
RUN sed -i -e 's|CHANGE_DIRECTORY|/opt|g' /etc/${application}/uwsgi_app.ini
RUN sed -i -e 's/APPLICATION_NAME/'"$application"'/g' /etc/${application}/uwsgi_app.ini

###################
#   supervisord   #
###################

# adding configuration for supervisord
COPY ./infrastructure/config/suprvisord/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# converting file to unix end line format
RUN dos2unix /etc/supervisor/conf.d/supervisord.conf

RUN sed -i -e 's|UWSGI_CONFIG_FILE_NAME|/etc/'"$application"'/uwsgi_app.ini|g' /etc/supervisor/conf.d/supervisord.conf

###########################
# configuring application #
###########################
COPY ./conf/app_config_skeleton.conf /etc/${application}/app.conf

# main section
RUN sed -i -e 's|APP_HOST|'"$app_host"'|g' /etc/${application}/app.conf
RUN sed -i -e 's/APP_PORT/11000/g' /etc/${application}/app.conf

# WARN! We turned debugging ON!
RUN sed -i -e 's/APP_DEBUG/true/g' /etc/${application}/app.conf
RUN sed -i -e 's/APP_RELOADER_INTERVAL/1/g' /etc/${application}/app.conf
RUN sed -i -e 's/APP_RELOADER/false/g' /etc/${application}/app.conf
RUN sed -i -e 's|APP_WEB_APP_NAME|'"$webappname"'|g' /etc/${application}/app.conf

# db_connection section
RUN sed -i -e 's|APP_DATABASE_CONNECTION_STRING|'"$app_database_connection_string"'|g' /etc/${application}/app.conf
RUN sed -i -e 's|APP_PRODUCE_SQL_ECHO|'"$app_produce_sql_echo"'|g' /etc/${application}/app.conf

# static section
RUN sed -i -e 's|APP_STATIC_FILES_PATH|'"$static_files_path"'|g' /etc/${application}/app.conf

# templates section
RUN sed -i -e 's|APP_TEMPLATES_PATH|'"$app_templates_path"'|g' /etc/${application}/app.conf

# security section
RUN sed -i -e 's|APP_SERVER_SECRET|'"$server_secret"'|g' /etc/${application}/app.conf
RUN sed -i -e 's|APP_COOKIE_SIGN_SECRET|'"$cookie_sign_secret"'|g' /etc/${application}/app.conf
RUN sed -i -e 's|APP_TOKEN_TTL_SECS|'"$token_ttl_secs"'|g' /etc/${application}/app.conf
RUN sed -i -e 's|APP_TOKEN_RECREATE_BEFORE_SECS|'"$token_recreate_before_secs"'|g' /etc/${application}/app.conf

# branding section
RUN sed -i -e 's|APP_SOLUTION_NAME|'"$solution_name"'|g' /etc/${application}/app.conf
RUN sed -i -e 's|APP_INSTANCE_OWNER_NAME|'"$instance_owner_name"'|g' /etc/${application}/app.conf

#################
#  application  #
#################
RUN mkdir -p ${sqlite_db_path}
RUN mkdir -p ${static_files_path}

# copying app files
ADD ${application} /opt/${application}

# changing current working directory
WORKDIR /opt/${application}

COPY requirements.txt .coveragerc .flake8 requirements-dev.txt ./

#############################
# initializing static files #
#############################
RUN mkdir -p /tmp/${application}_static
RUN npm install admin-lte --prefix /tmp/${application}_static

RUN cp -R /tmp/${application}_static/node_modules/admin-lte/bootstrap ${static_files_path}
RUN cp -R /tmp/${application}_static/node_modules/admin-lte/build ${static_files_path}
RUN cp -R /tmp/${application}_static/node_modules/admin-lte/dist ${static_files_path}
RUN cp -R /tmp/${application}_static/node_modules/admin-lte/plugins ${static_files_path}
RUN cp -R /opt/${application}/data/imgs/ ${static_files_path}

RUN rm -rf /tmp/${application}_static

############################
# initializing application #
############################
# installing app requirements

RUN apt-get -yqq install libpq-dev 
#RUN apt install build-essential

RUN pip3 install -r requirements.txt

WORKDIR /opt

WORKDIR /opt/${application}

#################
#     ports     #
#################
# specifying port which should be exposed
EXPOSE 8000

#######################
# initializing runner #
#######################

COPY ./infrastructure/config/run.sh /
RUN dos2unix /run.sh

RUN sed -i -e 's|{working_directory}|'"/opt"'|g' /run.sh
RUN sed -i -e 's/{application}/'"$application"'/g' /run.sh
RUN sed -i -e 's/{dbmgt_script}/'"$dbmgt_script"'/g' /run.sh

RUN chmod +x /run.sh

CMD ["/run.sh"]